name: Build

on:
  push:
    branches: [ "release-4.4-rockpi4" ]
#  pull_request:
#    branches: [ "develop-4.4" ]

jobs:
  build:
    runs-on: ubuntu-18.04

    env:
      ARCH: arm64
      CROSS_COMPILE: "/usr/local/gcc-linaro-7.3.1-2018.05-x86_64_aarch64-linux-gnu/bin/aarch64-linux-gnu-"
      ACTIONS_ALLOW_UNSECURE_COMMANDS: "true"

    steps:
    - name: Upload Release Assets
      uses: actions/github-script@v3
      with:
        github-token: ${{secrets.GH_TOKEN}}
        script: |
          const fs = require('fs').promises;
          const { repo: { owner, repo }, sha } = context;
          const release_id = 88294537; // "Unreleased"
          const today = new Date();

          // Nem maiak közül ennyit tartson meg
          const KEEP_OLD = 3;

          const listExistingArtifacts = (await github.repos.listReleaseAssets({
            owner,
            repo,
            release_id,
          })).data;

          // --- MAIAK TÖRLÉSE (UTOLSÓ KIVÉTELÉVEL) ---
          console.log("TODAY DELETE");

          // Mai nap feltöltöttek törölhetőek, 1 maradjon meg
          let listTodayArtifacts = listExistingArtifacts;

          // Maiak kiszedése
          if(listTodayArtifacts && listTodayArtifacts.length > 1){
           listTodayArtifacts = listTodayArtifacts.find(item => {
                itemDate = new Date(item.created_at);
                return itemDate.getDate() === today.getDate() && 
                  itemDate.getMonth() === today.getMonth() && 
                  itemDate.getFullYear() === today.getFullYear();
            });
          }

          console.log("Maiak:", listTodayArtifacts);

          // Dátum szerinti rendezés
          if(listTodayArtifacts && listTodayArtifacts.length > 1){
            listTodayArtifacts.sort((a, b) => {
                return a.created_at - b.created_at;
            });
          }

          // Levágjuk a legfrisebb 1 db-ot, az maradjon meg mint latest előtti.
          if(listTodayArtifacts && listTodayArtifacts.length > 0)listTodayArtifacts.length = (listTodayArtifacts.length - 1);

          // Maradék törölhető
          if(listTodayArtifacts && listTodayArtifacts.length > 0){
            for (let deleteItem of listTodayArtifacts) {
              console.log("DELETE Name: ", deleteItem.name);
              console.log("DELETE Created_1:", deleteItem.created_at);
            }
          }

          // --- RÉGIEK TÖRLÉSE ---
          console.log("OLD DELETE");

          let oldArtifacts = listExistingArtifacts;

          // Régebbi mint maiak kiszedése
          if(oldArtifacts && oldArtifacts.length > 1){
            oldArtifacts = oldArtifacts.find(item => {
                itemDate = new Date(item.created_at);
                return itemDate.getDate() !== today.getDate() || 
                  itemDate.getMonth() !== today.getMonth() || 
                  itemDate.getFullYear() !== today.getFullYear();
            });
          }

          console.log("regebbi: ", oldArtifacts);

          // Rendezzük
          if(oldArtifacts && oldArtifacts.length > 1){
            oldArtifacts.sort((a, b) => {
                return a.created_at - b.created_at;
            });
          }

          // Ha több mint 3 régi van, akkor kitöröljük őket..
          if(oldArtifacts && oldArtifacts.length > 3) {
              oldArtifacts.length = KEEP_OLD;

               // Delete
              for (let deleteItem of oldArtifacts) {
                console.log("Name: ", deleteItem.name);
                console.log("Created_1:", deleteItem.created_at);
              }
          }

          // --- FELTÖLTÉS ---

          console.log("Done.");    